<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Learn | LionMundo]]></title>
  <link href="http://hustlion.github.io/blog/categories/learn/atom.xml" rel="self"/>
  <link href="http://hustlion.github.io/"/>
  <updated>2016-05-03T16:55:43+08:00</updated>
  <id>http://hustlion.github.io/</id>
  <author>
    <name><![CDATA[Hustlion]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Three.js and Cannon.js: Basic Third Person Game]]></title>
    <link href="http://hustlion.github.io/blog/2015/06/29/BasicThirdPersonGame/"/>
    <updated>2015-06-29T06:50:45+08:00</updated>
    <id>http://hustlion.github.io/blog/2015/06/29/BasicThirdPersonGame</id>
    <content type="html"><![CDATA[<h1 id="three-basicthirdpersongame">THREE-BasicThirdPersonGame</h1>
<p><a href="https://github.com/HustLion/THREE-BasicThirdPersonGame">THREE-BasicThirdPersonGame</a>: <a href="http://matthiasschuetz.com/three-basicthirdpersongame/docs">tutorial</a>. Really cool. Try it <a href="https://rawgit.com/HustLion/THREE-BasicThirdPersonGame/master/demo1_simple.html">live</a>.</p>

<p>I’m interested in three.js so I will learn this one. Later learn phaser engine.</p>

<ul>
  <li>THREE.js: <a href="http://threejs.org/docs/">docs</a></li>
  <li>Cannon.js: this framework is a pure math and physics collection which can do complex calculations if you want a realistic simulation. <a href="https://github.com/schteppe/cannon.js/wiki">Docs</a>.</li>
  <li><a href="http://github.com/mrdoob/stats.js">stats.js</a>: JavaScript Performance Monitor. From this learnt how to write js in bookmarklet.</li>
  <li><a href="http://rawgit.com/">rawgit.com</a>: RawGit serves raw files directly from GitHub with proper Content-Type headers.</li>
  <li><a href="https://github.com/google/closure-compiler">Google Closure Compiler</a>: To get the latest version of it, click <a href="http://dl.google.com/closure-compiler/compiler-latest.zip">here</a>. Also can get it <a href="https://github.com/mrdoob/stats.js/tree/master/utils/compiler">here</a>.</li>
  <li><a href="http://ant.apache.org/bindownload.cgi">ant</a>: Apache Ant is a Java library and command-line tool that help building software.</li>
  <li><a href="http://www.emoji-cheat-sheet.com/">emoji cheat sheet</a></li>
  <li><a href="https://github.com/highslide-software/highcharts.com/">highcharts</a></li>
</ul>

<p>With <a href="http://rawgit.com/">rawgit.com</a>, a new way to deploy my scripts to my pages: build js with closure, in html I use relative path, only in my post I use rawgit.com links. Then all the css, html, js should be automatically resolved. Actually if use my own server, I can have a cdn myself since the <a href="https://github.com/rgrove/rawgit">source code</a> is available. :smiley:</p>

<h1 id="analysis">Analysis</h1>

<p>This is constructed as a tutorial. The code of all JavaScript files is fully commented. The whole game logic is placed in the <code>game.core.js</code> file.</p>

<p>To start, read the <a href="http://matthiasschuetz.com/three-basicthirdpersongame/docs">tutorial</a>. With this it’s not difficult to understand the game.</p>

<p>So we start with <code>demo1_simple.html</code>, <code>WebGL</code> gets checked and then the game is initiated. <code>Stats</code> monitors the frame rate and the game goes into the <code>loop()</code>.</p>

<p>I read the details and found some libs there. And I think it’s mostly variable definitions and functions which comply with physic laws. In this project, for now I think there is no game engine like phaser applied. So I think I will just examine the 3D part and write about it in my post and then I go to the phaser project.</p>

<p>In <code>game.three.js</code>, the <code>render()</code> function is defined, which turns out that it’s just a callback. The <code>createModel()</code> is the one I care about. It imports json data and deal with it. Ok, the model is imported by the code beginning at line 83 of <code>game.core.demo1</code>. The json data is stored in <code>game.models.js</code>. This file is really just a model, with lots of data. After importing, the script adds material and mesh to it.</p>

<h1 id="summary">Summary</h1>
<p>From this repo I acquired better understanding of a common game frame: <code>Init</code>-&gt;<code>Setup</code>-&gt;<code>Loop</code>. Found some wonderful tools like <a href="http://rawgit.com/">rawgit.com</a>, <a href="http://github.com/mrdoob/stats.js">stats.js</a>, <a href="http://www.emoji-cheat-sheet.com/">emoji cheat sheet</a>. From the details of code, I found that physics formulae are applied heavily. Maybe it’s time to check out how real game engines deal with these tasks.</p>

<h1 id="further-reading">Further Reading</h1>
<ul>
  <li>Similar repo with also tutorials: <a href="https://github.com/HustLion/BuildNewGames_ThreeJSGame">BuildNewGames_ThreeJSGame forked from nklsrh/BuildNewGames_ThreeJSGame</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A blog demo: Refresh-canvas]]></title>
    <link href="http://hustlion.github.io/blog/2015/06/28/refresh/"/>
    <updated>2015-06-28T19:50:45+08:00</updated>
    <id>http://hustlion.github.io/blog/2015/06/28/refresh</id>
    <content type="html"><![CDATA[<h1 id="refresh-canvas">Refresh-canvas</h1>

<h2 id="introduction">Introduction</h2>
<p>After learning Snake, I think it’s good to read the git repo that provided the tutorials, <a href="https://github.com/HustLion/refresh-canvas">refresh-canvas</a>.</p>

<p>I think this is more of a Mako example.</p>

<h2 id="new-things-encountered">New things encountered:</h2>

<ul>
  <li><a href="http://www.makotemplates.org/">Mako</a>: Mako is a template library written in Python.</li>
  <li><a href="http://learn.jquery.com/jquery-ui/getting-started/">jQuery UI</a>: really marvelous… quickly a modern, elegant UI,,</li>
  <li><a href="https://rsync.samba.org/">Rsync</a>: rsync is an open source utility that provides fast incremental file transfer. <a href="http://blog.sina.com.cn/s/blog_4b9b714a0100q34n.html">Tutorial in Chinese</a></li>
  <li><a href="http://pyyaml.org/">PyYaml</a></li>
  <li><a href="http://obsessing.org/">a online editor for css</a></li>
  <li><a href="http://azarask.in/projects/algorithm-ink/#d3c3be13">algorithm ink</a></li>
  <li><a href="https://www.nodebox.net/code/index.php/Home">NodeBox</a>: NodeBox is a Mac OS X application that lets you create 2D visuals (static, animated or interactive) using Python programming code and export them as a PDF or a QuickTime movie. NodeBox is free and well-documented.</li>
  <li><a href="http://acko.net/blog/farbtastic-jquery-color-picker-plug-in/">Farbtastic</a>: Farbtastic is a jQuery plug-in that can add one or more color picker widgets into a page.</li>
  <li><a href="https://iwantmyname.com/blog/2014/05/the-updated-big-list-of-static-website-generators-for-your-site-blog-or-wiki.html">About static website generators</a></li>
  <li><a href="http://jekyllrb.com/">jekyll</a></li>
  <li><a href="http://jekyllthemes.org/">jekyll themes</a>: I like <a href="http://jekyllthemes.org/themes/midnight/">this</a></li>
</ul>

<p>And, the presentation here is great… Excellent to teach coding. Can’t imagine how we can finish it in MS PowerPoint or Prezi. Since we run code right on the page. By pressing <code>F11</code> in Firefox, it’s quite great for presentation.</p>

<p>Later maybe I will try to understand existing mako demos and rebuild the presentation in Mako haha.</p>

<h2 id="analysis-of-project">Analysis of project</h2>
<p><a href="https://github.com/HustLion/refresh-canvas/blob/master/Analysis.md">Read it here</a></p>

<h2 id="summarry">Summarry</h2>
<p>From this repository I learnt the way to use python and mako to build a static site. Acquired a new workflow: Workflow: <code>template.mak</code>-&gt;<code>yaml</code>-&gt;<code>make.py</code>. But I think I will use <code>jekyll</code> to establish my blog since I mainly use it to test my web project and sort my writings out. No need to further understand Mako syntax and usages. Even for <code>jekyll</code>, I can just use the default and most simple ones and learn as the needs grow.</p>

<h1 id="further-reading">Further reading</h1>

<h2 id="inside-the-project">Inside the project</h2>
<ul>
  <li>template.mak</li>
  <li>make.py</li>
  <li>rsync</li>
  <li>presentation</li>
</ul>

<h2 id="ouside-the-project">Ouside the project</h2>
<ul>
  <li>jekyll sites to learn about: <a href="https://github.com/HustLion/jekyll-1">jekyll</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snake]]></title>
    <link href="http://hustlion.github.io/blog/2015/06/28/snake/"/>
    <updated>2015-06-28T19:00:45+08:00</updated>
    <id>http://hustlion.github.io/blog/2015/06/28/snake</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/HustLion/snake">Snake</a> is my starting point for regular coding. I examined the design of the game from the source code and refactored the code for better reading. Familiarity of javascript improved.</p>

<p>Try it <a href="http://hustlion.github.io/projects/snake/index.htm">live</a>. (This link works because I cloned my snake project as a submodule of the repo of my site, this is not really convenient. Thanks to <a href="http://rawgit.com/">rawgit.com</a>, I can refer to my repo directly now like <a href="https://rawgit.com/HustLion/snake/master/index.htm">this</a>. I tend to use the dev/test version of it.)</p>
]]></content>
  </entry>
  
</feed>
