<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Game | LionMundo]]></title>
  <link href="http://hustlion.github.io/blog/categories/game/atom.xml" rel="self"/>
  <link href="http://hustlion.github.io/"/>
  <updated>2016-05-03T16:55:43+08:00</updated>
  <id>http://hustlion.github.io/</id>
  <author>
    <name><![CDATA[Hustlion]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[EVE Online国服笔记]]></title>
    <link href="http://hustlion.github.io/blog/2015/07/25/eve/"/>
    <updated>2015-07-25T00:50:45+08:00</updated>
    <id>http://hustlion.github.io/blog/2015/07/25/eve</id>
    <content type="html"><![CDATA[<h1 id="section">技能学习路线</h1>
<p><strong>【不在新手88本中】规避机动理论 3</strong> （打仗不容易掉队）
28. <strong>【不在新手88本中】盖伦特战列舰操控 3级</strong>
30. 【不在新手88本中】无人机控制论 4级
31. 【不在新手88本中】无人机精确射击 4级
35. 【高级技能】岗哨无人机操控理论 4
36. 【高级技能】盖伦特无人机专业研究 4级
37. 【高级技能】米玛塔尔无人机专业研究 4级
38. 【高级技能】加达里无人机专业研究  4级
42. 【后勤类】维修系统理论 4级 
46. 【不在新手88本中，本地怪物没有此类伤害，可以后期学习】动能装甲补偿理论 3级 
47. 【不在新手88本中，本地怪物没有此类伤害，可以后期学习】热能装甲补偿理论 3级 
57. 【不在新手88本中】战术护盾操控 3级 
58. 【不在新手88本中】爆炸护盾补偿 3级 
60. 【不在新手88本中】动能护盾补偿 3级 
61. 【不在新手88本中】热能护盾补偿 3级 
64. 加达里战列巡洋舰操作 4级、 中型磁轨炮专业研究 4级。（开T2炮-猛鲑-2型 ）。
65. 无人机、工程学、导航学、CPU、护盾、扫描、射击学，能学习的辅助技能学到3级，4级。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three.js and Cannon.js: Basic Third Person Game]]></title>
    <link href="http://hustlion.github.io/blog/2015/06/29/BasicThirdPersonGame/"/>
    <updated>2015-06-29T06:50:45+08:00</updated>
    <id>http://hustlion.github.io/blog/2015/06/29/BasicThirdPersonGame</id>
    <content type="html"><![CDATA[<h1 id="three-basicthirdpersongame">THREE-BasicThirdPersonGame</h1>
<p><a href="https://github.com/HustLion/THREE-BasicThirdPersonGame">THREE-BasicThirdPersonGame</a>: <a href="http://matthiasschuetz.com/three-basicthirdpersongame/docs">tutorial</a>. Really cool. Try it <a href="https://rawgit.com/HustLion/THREE-BasicThirdPersonGame/master/demo1_simple.html">live</a>.</p>

<p>I’m interested in three.js so I will learn this one. Later learn phaser engine.</p>

<ul>
  <li>THREE.js: <a href="http://threejs.org/docs/">docs</a></li>
  <li>Cannon.js: this framework is a pure math and physics collection which can do complex calculations if you want a realistic simulation. <a href="https://github.com/schteppe/cannon.js/wiki">Docs</a>.</li>
  <li><a href="http://github.com/mrdoob/stats.js">stats.js</a>: JavaScript Performance Monitor. From this learnt how to write js in bookmarklet.</li>
  <li><a href="http://rawgit.com/">rawgit.com</a>: RawGit serves raw files directly from GitHub with proper Content-Type headers.</li>
  <li><a href="https://github.com/google/closure-compiler">Google Closure Compiler</a>: To get the latest version of it, click <a href="http://dl.google.com/closure-compiler/compiler-latest.zip">here</a>. Also can get it <a href="https://github.com/mrdoob/stats.js/tree/master/utils/compiler">here</a>.</li>
  <li><a href="http://ant.apache.org/bindownload.cgi">ant</a>: Apache Ant is a Java library and command-line tool that help building software.</li>
  <li><a href="http://www.emoji-cheat-sheet.com/">emoji cheat sheet</a></li>
  <li><a href="https://github.com/highslide-software/highcharts.com/">highcharts</a></li>
</ul>

<p>With <a href="http://rawgit.com/">rawgit.com</a>, a new way to deploy my scripts to my pages: build js with closure, in html I use relative path, only in my post I use rawgit.com links. Then all the css, html, js should be automatically resolved. Actually if use my own server, I can have a cdn myself since the <a href="https://github.com/rgrove/rawgit">source code</a> is available. :smiley:</p>

<h1 id="analysis">Analysis</h1>

<p>This is constructed as a tutorial. The code of all JavaScript files is fully commented. The whole game logic is placed in the <code>game.core.js</code> file.</p>

<p>To start, read the <a href="http://matthiasschuetz.com/three-basicthirdpersongame/docs">tutorial</a>. With this it’s not difficult to understand the game.</p>

<p>So we start with <code>demo1_simple.html</code>, <code>WebGL</code> gets checked and then the game is initiated. <code>Stats</code> monitors the frame rate and the game goes into the <code>loop()</code>.</p>

<p>I read the details and found some libs there. And I think it’s mostly variable definitions and functions which comply with physic laws. In this project, for now I think there is no game engine like phaser applied. So I think I will just examine the 3D part and write about it in my post and then I go to the phaser project.</p>

<p>In <code>game.three.js</code>, the <code>render()</code> function is defined, which turns out that it’s just a callback. The <code>createModel()</code> is the one I care about. It imports json data and deal with it. Ok, the model is imported by the code beginning at line 83 of <code>game.core.demo1</code>. The json data is stored in <code>game.models.js</code>. This file is really just a model, with lots of data. After importing, the script adds material and mesh to it.</p>

<h1 id="summary">Summary</h1>
<p>From this repo I acquired better understanding of a common game frame: <code>Init</code>-&gt;<code>Setup</code>-&gt;<code>Loop</code>. Found some wonderful tools like <a href="http://rawgit.com/">rawgit.com</a>, <a href="http://github.com/mrdoob/stats.js">stats.js</a>, <a href="http://www.emoji-cheat-sheet.com/">emoji cheat sheet</a>. From the details of code, I found that physics formulae are applied heavily. Maybe it’s time to check out how real game engines deal with these tasks.</p>

<h1 id="further-reading">Further Reading</h1>
<ul>
  <li>Similar repo with also tutorials: <a href="https://github.com/HustLion/BuildNewGames_ThreeJSGame">BuildNewGames_ThreeJSGame forked from nklsrh/BuildNewGames_ThreeJSGame</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snake]]></title>
    <link href="http://hustlion.github.io/blog/2015/06/28/snake/"/>
    <updated>2015-06-28T19:00:45+08:00</updated>
    <id>http://hustlion.github.io/blog/2015/06/28/snake</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/HustLion/snake">Snake</a> is my starting point for regular coding. I examined the design of the game from the source code and refactored the code for better reading. Familiarity of javascript improved.</p>

<p>Try it <a href="http://hustlion.github.io/projects/snake/index.htm">live</a>. (This link works because I cloned my snake project as a submodule of the repo of my site, this is not really convenient. Thanks to <a href="http://rawgit.com/">rawgit.com</a>, I can refer to my repo directly now like <a href="https://rawgit.com/HustLion/snake/master/index.htm">this</a>. I tend to use the dev/test version of it.)</p>
]]></content>
  </entry>
  
</feed>
